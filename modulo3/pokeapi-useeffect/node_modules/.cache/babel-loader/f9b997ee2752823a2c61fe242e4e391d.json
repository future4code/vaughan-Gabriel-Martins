{"ast":null,"code":"import _classCallCheck from \"/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/src/components/PokeCard/PokeCard.js\";\nimport React from \"react\";\nimport axios from \"axios\";\n\nvar PokeCard = /*#__PURE__*/function (_React$Component) {\n  _inherits(PokeCard, _React$Component);\n\n  var _super = _createSuper(PokeCard);\n\n  function PokeCard() {\n    var _this;\n\n    _classCallCheck(this, PokeCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      // valor do estado que guarda infos e foto do pokemon\n      pokemon: {}\n    };\n\n    _this.pegaPokemon = function (pokeName) {\n      axios.get(\"https://pokeapi.co/api/v2/pokemon/\".concat(pokeName)).then(function (response) {\n        // guarda as infos do pokemon no estado\n        _this.setState({\n          pokemon: response.data\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PokeCard, [{\n    key: \"componentDidMount\",\n    value: // método que roda após a montagem do componente\n    function componentDidMount() {\n      this.pegaPokemon(this.props.pokemon);\n    } // método que roda após a atualização do componente.\n    // Um dos casos de atualização do componente é a\n    // mudança da props que está sendo passado pra ele\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // aqui, é feita uma verificação da props anterior com a props atual.\n      // Caso a props anterior seja diferente da props atual,\n      // a função pegaPokemon é chamada.\n      if (prevProps.pokemon !== this.props.pokemon) {\n        this.pegaPokemon(this.props.pokemon);\n      }\n    } // função que bate na poke API com um nome específico de pokemon\n    // Isso permite que consigamos pegar as infos dos pokemons.\n    // Nos métodos de ciclo de vida, ela é chamada passando como\n    // parâmetro o nome de pokemon que está chegando como props.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pokemon = this.state.pokemon;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, pokemon.name), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, pokemon.weight, \" Kg\"), pokemon.types && /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 27\n        }\n      }, pokemon.types[0].type.name), pokemon.sprites && /*#__PURE__*/React.createElement(\"img\", {\n        src: pokemon.sprites.front_default,\n        alt: pokemon.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return PokeCard;\n}(React.Component);\n\nexport default PokeCard;","map":{"version":3,"sources":["/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/src/components/PokeCard/PokeCard.js"],"names":["React","axios","PokeCard","state","pokemon","pegaPokemon","pokeName","get","then","response","setState","data","catch","err","console","log","props","prevProps","name","weight","types","type","sprites","front_default","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,Q;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACN;AACAC,MAAAA,OAAO,EAAE;AAFH,K;;UA0BRC,W,GAAc,UAAAC,QAAQ,EAAI;AACxBL,MAAAA,KAAK,CACFM,GADH,6CAC4CD,QAD5C,GAEGE,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChB;AACA,cAAKC,QAAL,CAAc;AAAEN,UAAAA,OAAO,EAAEK,QAAQ,CAACE;AAApB,SAAd;AACD,OALH,EAMGC,KANH,CAMS,UAAAC,GAAG,EAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OARH;AASD,K;;;;;;;WA/BD;AACA,iCAAoB;AAClB,WAAKR,WAAL,CAAiB,KAAKW,KAAL,CAAWZ,OAA5B;AACD,K,CAED;AACA;AACA;;;;WACA,4BAAmBa,SAAnB,EAA8B;AAC5B;AACA;AACA;AACA,UAAIA,SAAS,CAACb,OAAV,KAAsB,KAAKY,KAAL,CAAWZ,OAArC,EAA8C;AAC5C,aAAKC,WAAL,CAAiB,KAAKW,KAAL,CAAWZ,OAA5B;AACD;AACF,K,CAED;AACA;AACA;AACA;;;;WAaA,kBAAS;AACP,UAAMA,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAA3B;AAEA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,OAAO,CAACc,IAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAId,OAAO,CAACe,MAAZ,QAFF,EAGGf,OAAO,CAACgB,KAAR,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIhB,OAAO,CAACgB,KAAR,CAAc,CAAd,EAAiBC,IAAjB,CAAsBH,IAA1B,CAHpB,EAIGd,OAAO,CAACkB,OAAR,iBACC;AAAK,QAAA,GAAG,EAAElB,OAAO,CAACkB,OAAR,CAAgBC,aAA1B;AAAyC,QAAA,GAAG,EAAEnB,OAAO,CAACc,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADF;AAUD;;;;EApDoBlB,KAAK,CAACwB,S;;AAuD7B,eAAetB,QAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass PokeCard extends React.Component {\n  state = {\n    // valor do estado que guarda infos e foto do pokemon\n    pokemon: {}\n  };\n\n  // método que roda após a montagem do componente\n  componentDidMount() {\n    this.pegaPokemon(this.props.pokemon);\n  }\n\n  // método que roda após a atualização do componente.\n  // Um dos casos de atualização do componente é a\n  // mudança da props que está sendo passado pra ele\n  componentDidUpdate(prevProps) {\n    // aqui, é feita uma verificação da props anterior com a props atual.\n    // Caso a props anterior seja diferente da props atual,\n    // a função pegaPokemon é chamada.\n    if (prevProps.pokemon !== this.props.pokemon) {\n      this.pegaPokemon(this.props.pokemon);\n    }\n  }\n\n  // função que bate na poke API com um nome específico de pokemon\n  // Isso permite que consigamos pegar as infos dos pokemons.\n  // Nos métodos de ciclo de vida, ela é chamada passando como\n  // parâmetro o nome de pokemon que está chegando como props.\n  pegaPokemon = pokeName => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\n      .then(response => {\n        // guarda as infos do pokemon no estado\n        this.setState({ pokemon: response.data });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    const pokemon = this.state.pokemon;\n\n    return (\n      <div>\n        <p>{pokemon.name}</p>\n        <p>{pokemon.weight} Kg</p>\n        {pokemon.types && <p>{pokemon.types[0].type.name}</p>}\n        {pokemon.sprites && (\n          <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PokeCard;\n"]},"metadata":{},"sourceType":"module"}