{"ast":null,"code":"import _slicedToArray from \"/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/src/components/PokeCard/PokeCard.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nvar PokeCard = function PokeCard(props) {\n  // state = {\n  //   // valor do estado que guarda infos e foto do pokemon\n  //   pokemon: {}\n  // };\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      pokemon = _useState2[0],\n      setPokemon = _useState2[1]; // // método que roda após a montagem do componente\n  // componentDidMount() {\n  //   this.pegaPokemon(this.props.pokemon);\n  // }\n\n\n  useEffect(function () {\n    pegaPokemon(props.pokemon);\n  }, [props.pokemon]); // método que roda após a atualização do componente.\n  // Um dos casos de atualização do componente é a\n  // mudança da props que está sendo passado pra ele\n  // componentDidUpdate(prevProps) {\n  // aqui, é feita uma verificação da props anterior com a props atual.\n  // Caso a props anterior seja diferente da props atual,\n  // a função pegaPokemon é chamada.\n  // if (prevProps.pokemon !== this.props.pokemon) {\n  //   this.pegaPokemon(this.props.pokemon);\n  // }\n  // }\n\n  useEffect(function () {\n    setPokemon(props.pokemon);\n  }, [props.pokemon]); // função que bate na poke API com um nome específico de pokemon\n  // Isso permite que consigamos pegar as infos dos pokemons.\n  // Nos métodos de ciclo de vida, ela é chamada passando como\n  // parâmetro o nome de pokemon que está chegando como props.\n\n  var pegaPokemon = function pegaPokemon(pokeName) {\n    axios.get(\"https://pokeapi.co/api/v2/pokemon/\".concat(pokeName)).then(function (response) {\n      // guarda as infos do pokemon no estado\n      // this.setState({ pokemon: response.data });\n      setPokemon(response.data);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }; // render() {\n  // const pokemon = this.state.pokemon;\n  // const pokemon = pokemon;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, pokemon.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, pokemon.weight, \" Kg\"), pokemon.types && /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 27\n    }\n  }, pokemon.types[0].type.name), pokemon.sprites && /*#__PURE__*/React.createElement(\"img\", {\n    src: pokemon.sprites.front_default,\n    alt: pokemon.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })); // }\n};\n\nexport default PokeCard;","map":{"version":3,"sources":["/Users/gdlmartins/Desktop/ti/labenu/semana01/codigos/vaughan-Gabriel-Martins/modulo3/pokeapi-useeffect/src/components/PokeCard/PokeCard.js"],"names":["React","useState","useEffect","axios","PokeCard","props","pokemon","setPokemon","pegaPokemon","pokeName","get","then","response","data","catch","err","console","log","name","weight","types","type","sprites","front_default"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,QAAQ,GAAE,SAAVA,QAAU,CAACC,KAAD,EAAW;AACzB;AACA;AACA;AACA;AAGC,kBAA8BJ,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB,iBAPwB,CAUzB;AACA;AACA;AACA;;;AAEAL,EAAAA,SAAS,CAAC,YAAM;AAACM,IAAAA,WAAW,CAACH,KAAK,CAACC,OAAP,CAAX;AAA2B,GAAnC,EAAoC,CAACD,KAAK,CAACC,OAAP,CAApC,CAAT,CAfyB,CAiBzB;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACF;;AAECJ,EAAAA,SAAS,CAAC,YAAI;AACZK,IAAAA,UAAU,CAACF,KAAK,CAACC,OAAP,CAAV;AACD,GAFQ,EAEP,CAACD,KAAK,CAACC,OAAP,CAFO,CAAT,CA7BwB,CAkCzB;AACA;AACA;AACA;;AACA,MAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC9BN,IAAAA,KAAK,CACFO,GADH,6CAC4CD,QAD5C,GAEGE,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChB;AACA;AACAL,MAAAA,UAAU,CAACK,QAAQ,CAACC,IAAV,CAAV;AACD,KANH,EAOGC,KAPH,CAOS,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KATH;AAUD,GAXD,CAtCyB,CAmDzB;AACE;AACA;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIT,OAAO,CAACY,IAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIZ,OAAO,CAACa,MAAZ,QAFF,EAGGb,OAAO,CAACc,KAAR,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAId,OAAO,CAACc,KAAR,CAAc,CAAd,EAAiBC,IAAjB,CAAsBH,IAA1B,CAHpB,EAIGZ,OAAO,CAACgB,OAAR,iBACC;AAAK,IAAA,GAAG,EAAEhB,OAAO,CAACgB,OAAR,CAAgBC,aAA1B;AAAyC,IAAA,GAAG,EAAEjB,OAAO,CAACY,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF,CAvDuB,CAiEzB;AACD,CAlED;;AAoEA,eAAed,QAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\n\nconst PokeCard =(props) => {\n  // state = {\n  //   // valor do estado que guarda infos e foto do pokemon\n  //   pokemon: {}\n  // };\n\n\n   const [pokemon, setPokemon] = useState({});\n\n\n  // // método que roda após a montagem do componente\n  // componentDidMount() {\n  //   this.pegaPokemon(this.props.pokemon);\n  // }\n\n  useEffect(() => {pegaPokemon(props.pokemon)},[props.pokemon] )\n\n  // método que roda após a atualização do componente.\n  // Um dos casos de atualização do componente é a\n  // mudança da props que está sendo passado pra ele\n  // componentDidUpdate(prevProps) {\n    // aqui, é feita uma verificação da props anterior com a props atual.\n    // Caso a props anterior seja diferente da props atual,\n    // a função pegaPokemon é chamada.\n    // if (prevProps.pokemon !== this.props.pokemon) {\n    //   this.pegaPokemon(this.props.pokemon);\n    // }\n  // }\n\n   useEffect(()=>{ \n     setPokemon(props.pokemon)\n   },[props.pokemon] )\n\n\n  // função que bate na poke API com um nome específico de pokemon\n  // Isso permite que consigamos pegar as infos dos pokemons.\n  // Nos métodos de ciclo de vida, ela é chamada passando como\n  // parâmetro o nome de pokemon que está chegando como props.\n  const pegaPokemon = pokeName => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\n      .then(response => {\n        // guarda as infos do pokemon no estado\n        // this.setState({ pokemon: response.data });\n        setPokemon(response.data)\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  // render() {\n    // const pokemon = this.state.pokemon;\n    // const pokemon = pokemon;\n\n    return (\n      <div>\n        <p>{pokemon.name}</p>\n        <p>{pokemon.weight} Kg</p>\n        {pokemon.types && <p>{pokemon.types[0].type.name}</p>}\n        {pokemon.sprites && (\n          <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n        )}\n      </div>\n    );\n  // }\n}\n\nexport default PokeCard;\n"]},"metadata":{},"sourceType":"module"}